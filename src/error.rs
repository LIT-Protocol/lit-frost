use thiserror::Error as TError;

/// Errors generated from this library
#[derive(Debug, TError)]
pub enum Error {
    /// Verifiable secret sharing scheme errors
    #[error("Vsss error: {0}")]
    Vsss(vsss_rs::Error),
    // #[error("Ed25519 Frost error: {0}")]
    // Ed25519(#[from] frost_ed25519::Error),
    // #[error("Ed448 Frost error: {0}")]
    // Ed448(#[from] frost_ed448::Error),
    // #[error("Ristretto25519 Frost error: {0}")]
    // Ristretto25519(#[from] frost_ristretto255::Error),
    // #[error("K256 Frost error: {0}")]
    // K256(#[from] frost_secp256k1::Error),
    // #[error("P256 Frost error: {0}")]
    // P256(#[from] frost_p256::Error),
    // #[error("P384 Frost error: {0}")]
    // P384(#[from] crate::p384::Error),
    #[error("Error: {0}")]
    General(String),
}

impl From<vsss_rs::Error> for Error {
    fn from(e: vsss_rs::Error) -> Self {
        Self::Vsss(e)
    }
}

impl<C: frost_core::Ciphersuite> From<frost_core::Error<C>> for Error {
    fn from(e: frost_core::Error<C>) -> Self {
        Error::General(e.to_string())
    }
}

/// Results generated by this library
pub type FrostResult<T> = anyhow::Result<T, Error>;
